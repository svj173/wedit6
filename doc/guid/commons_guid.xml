<?xml version="1.0" encoding="UTF-8"?>

<part name="Редактор. Общее.">

    <part name="Общее">

        Отличия от предыдущих версий
        1) Структура документа заложена в самом документе.
        2) Создание структуры - начинается с самого верхнего элемента.
        3) для XML используется stax parser
        4) Системные функции забиты в коде и не пррогписываются в конфиге, но зхато к ним можно обратиться по имени,
      как и к конфиговским функциям.
        5) Структура XML
          - документ:
             а) тэги - обьекты и данные. При обьектах - создается обьект, при данных - в обьект закидываются эти данные.
          - конфиг
             а) При добвлении функции, прописывается ее класс и сопроводительные параметры, например, путь до конфиг-файла этой функции (начальные параметры).
        6)

        Запуск редактора:
   exec $JAVA_HOME/bin/java -Dmodule.home=$MODULE_HOME -Dfile.encoding=UTF-8 -jar $MODULE_HOME/lib/wedit.jar config_file.txt
        - config_file.txt    - путь от $MODULE_HOME 

        ContentFrame. Меню:
        - Проекты

        Книги обрабатываются собственным XML парсером.
        Причины:
        1) в книгах могут встречаться недопустимые для StaX парсера конструкции
            - стрелка влево,
            - стрелка вправо,
            - символ and.

    </part>

    <part name="Сделать">
        Перечисление - снизу вверх.

        2) Определится с базовым java-редактором (можно расширить имеющийся до поддержки файлов своего формата)
        1) Форматы
         - конфиг-файлов
            +- главный
            - функций
         - конфиги проектов
         - книги
        
    </part>

    <part name="Использование java-редактора">

        JEditorPane - редактирование документов - text, html, rtf (без стиля ?)
        JTextPane   - редактирование текста с использованием стилей.

    Редактор привязывается к обьекту. От обьекта можно получить редактор.
        
    Editor panes and text panes provide the getEditorKit method to get the current editor kit and the setEditorKit method to change it.

    The Swing text package provides the following editor kits:

    DefaultEditorKit
Reads and writes plain text, and provides a basic set of editing commands. Details about how the text system treats
newlines can be found in the DefaultEditorKit API documentation. Briefly, the '\n' character is used internally,
but the document or platform line separators are used when writing files. All the other editor kits are descendants of the DefaultEditorKit class.
    StyledEditorKit
Reads and writes styled text, and provides a minimal set of actions for styled text. This class is a subclass of
DefaultEditorKit and is the editor kit used by JTextPane by default.
    HTMLEditorKit
Reads, writes, and edits HTML. This is a subclass of StyledEditorKit.

Each of the editor kits listed above has been registered with the JEditorPane class and associated with the text format that
the kit reads, writes, and edits. When a file is loaded into an editor pane, the pane checks the format of the file against
its registered kits. If a registered kit is found that supports that file format, the pane uses the kit to read the file,
display, and edit it. Thus, the editor pane effectively transforms itself into an editor for that text format.
        You can extend JEditorPane to support your own text format by creating an editor kit for it, and then using JEditorPane's
registerEditorKitForContentType to associate your kit with your text format.

        HTMLEditorKit - не подходит, т.к. не получится работы с деревом содержаний.

    </part>

    <part name="Конфиги">
        <part name="Главный конфиг">
            Файл: conf/config.txt

            Состав:

            1) Титл. Надпись на фрейме Содержимого, перед датой сборки и полной версией редактора
                wedit.title=Мой редактор

            2) путь до директории, где лежат функции (допускаются поддиректории)   -- в коде
                functions.dir=conf/function

            3) путь до директории, где лежат дефолтные структуры книг - наборы. (допускаются поддиректории)  -- в коде
                elements.dir=conf/element

            ПС. Данный конфиг не нужен.

        </part>

        <part name="Проект">
            Файл: project.xml

            Расположен в директории проекта.

            Состав:
            1) Название проекта
            2) Автор проекта
            3) Даты
             - создания
             - редактирования (изменения)
            4) Список разделов и вложенных в них книг.
        </part>

    </part>


    <part name="Функции">

        <part name="Общее">
        Текущее положение - НЕ в конфиге. Функции задаются в коде и там же в коде зханосятся в соовтетсвующие места системы.

        Конфиг-файл
        1) В формате XML чтобы иметь возможность указывать кодировку текста (если там исп русские буквы).
        2) Парсится в StaX.
          - индивидуальное - просто раздел 'properties' - без подтегов-подразделов

        Параметры:
        1) class           - имя класса функции
        2) menu            - меню, где располагается (допускается указание подменю - через слеш. Также может отсутствовать) - Edit, SaveAs/HTML
        3) groupMenu       - номер группы в меню (при группировке)
        4) nameKey         - ключ к имени - названию функции - для отображения в меню
        5) functionGroup   - функциональная группа (может отсутствовать), только одна (эти функции генерят событие с таким именем)          - reopen
        6) listenerGroup   - имя группы функций, на события которой подписываемся, можно несколько через запятую
        7) listenerType    - before/after - тип подписываемого события  (или не указывать? - пусть приходят оба?)     -- ?
        8) icon            - ?
        9) mapKey          - клавиатура - Ctrl/S, Alt/T, Ctrl/E, S
        10) event          - описание на генерируемый функцией обьект-событие   - ActionEvent
            10.1) before
              - object_class  - source
              - ActionCommand - тот, который передала функция, которая подписалась, чтобы она когда ее вызовут сама понимала о чем идет речь.
            10.2) after
        6) nameKeyFile     - путь до файла, содержащего имена-ключи к используемым функцией текстам и названиям
        7) params          - список дополнительных параметров
          7.1) par name="BookList"  -- name - внутренний ИД параметра
            - class        - имя класса параметра
            - baseClass    - ?
            - type         - тип параметра
                - String,
                - Integer,
                - File,
                - Enum,
                - List (необходим тип перечилсяемого параметра, либо это такой же параметр PAR)...
                - Select
            - value        - дефолтное значение параметра в строковом виде
            - nameKey      - ключ к наименованию параметра (необходим, например, при редактировании)
            - descKey      - ключ на описание параметра
            - category     - wedit-user-bookTitle - категория параметра (область видимости)
            - editable     - yes/no  - можно ли редактировать параметр
            - optionMenuType    -
                Тип меню, используемый для настройки (редактирования) данного параметра.
                   Фиксированные значения:
                    1 - стандартное (т.е.  обрабатывается системными функциями Редактора),
                        вызывается стандартное диалоговое окно.
                    2 - стандартное, но создается набор вложенных меню - только для селектовых типов.
                    3 - собственное. Т.е. на пункт меню навешивается листенер
                        самой функции, которая и открывает собственное окно редактирования.
            - list         - для типа List
                - item name="0"
        PS
        1) Возможно с параметрами не заморачиваться, а функции сами вкладывают что-то в Настройки и сами отвечают за окна редактирования.
        - getParamsToString   - выдает что-то известное только функции
        - setParamsFromString - получает какую-то строку и парсит ее под свои параметры


        API
        1) getIcon ( int size ) - выдать иконку, удовлетворяющую данному размеру (равно либо меньше, если нет)
        2) getMsgFile()         - выдать имя файла (с поддиректориями), в котором находятся Текстовые многоязычные сообщения этой функции.

        API параметров
        1) toString
        2) setValueAsString ( string )


        Menu
        1) File
         - здесь содержатся все операции по работе с файлами, в т.ч. и импорт наcтроек пользoвателя из стороннего файла.
        2) Edit
        3) SaveAs
            - HTML
        4) Text
            - Spelling
        5) Style

        Function groups
        1) reopen
        2) tree
        3) search

        Listener groups
        1) bookFile - Save, Open
        </part>

        <part name="Сохранение данных об активных элементах - по закрытию редактора">
            1) Данные сохраняются в user_params.xml  (для linux системы - в домашней поддиректории .wedit6) в теге 'open'.
            2) Сохраняет функция
                WEditShutdown / Par.GM.alarmClose() / UserParamsManager.close / saveOpen
            3) Парсится файл в UserParamsManager.loadParameters

            Сохранение инфы об активных элементах
            1) Доп тег -
            active
                active_project:projectId
                active_book:bookId
                active_chapter:chapterId
        </part>
    </part>

    <part name="Стили">
        Играют важную роль.
        По стилю текста (наименованию стиля) определяется:
        - заголовок книги, главы, эпизода и т.д.
        - аннотация
        - ссылки, поиски
        - простой текст - может без имени стиля
        - сложный текст - т.е. простой текст (c именем стиля - сложный текст), но с какими-то изменениями - другой цвет, правые-левые смещения и т.д.

        Все стили имеют свое наименование.
        Простой текст в xml файле не содержит элементов стиля.

        Внимание! Имена стилей нельзя прописать в enum, т.к. у элементов имена стилей - динамические (глубина элементов может бесконечно варьироваться).
            Но есть enum - тип имени стиля, где стили элементов описаны одним типом.

        Алгоритм отличия простого текста от сложного (варианты):
        1) Накладывать стиль простого текста - берется из описания книги.
        2) Смотрим только имя - нет имени - сложный текст. Т.е. при изменениях стиля текста удаляется у него имя стиля - атрибут styleName.

        Стили:
        1) В текстовом редакторе.
         - простой текст - либо есть имя стиля, либо нет
         - сложный текст - имеет свое имя стиля
         - маркеры, поиск и т.д. - свои имена стилей
         - титлы, аннотации - свои имена стилей
        2) В xml файле
         - простой текст - тег текста без стиля.
         - сложный текст - тег текста со стилем.
         - титлы, аннотации  - свои теги-обьекты.
         - маркеры, поиск  - свои теги-обьекты - ???.


        Алгоритм работы со стилем простого текста
        1) В редакторе текстов набирается текст и навешивается на него стиль - простой текст. В стиль должно добавиться имя стиля простого текста.
         -- по-моему, если просто набираешь текст, то стиль текста - по умолчанию, а имя стиля - нет, т.к. это чисто мой функционал.
         -- т.е. необходимо все-таки сравнивать со стилем простого текста, чтобы выявить просто текст и подкрашенный текст.
        2) Сохранение текста в дерево обьектов: если имя стиля - простой текст, стиль в обьекте не запоминается.
        3) Сохранение в файл: Нет стиля в обьекте, нет стиля и в файле.
        4) Чтение из файла: Нет стиля в файле, нет и в созданном новом обьекте.
        5) Скидывание в текстовый редактор: нет стиля, навешиваем Простой стиль с именем стиля.


        BookNodeToText - Преобразовать древовидный обьект книги в текстовый документ для редактирования.
        TextToBookNode - Скидывает текст из области редактирования в дерево.

        BookNodeStaxParser - парсер XML файла книги - точнее, куска файла, относящегося к элементу книги. Структура и т.д. - парсятся своими парсерами.

    </part>

    <part name=""></part>

</part>
